# Docker Compose for Ultimate Contest Radar Development
# This provides a complete development environment with all services

version: '3.8'

services:
  # Main Next.js application
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    depends_on:
      - redis
      - postgres
    networks:
      - contest_radar_dev

  # Redis for caching and real-time features
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - contest_radar_dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # PostgreSQL for main database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: contest_radar
      POSTGRES_USER: contest_user
      POSTGRES_PASSWORD: contest_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - contest_radar_dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U contest_user -d contest_radar"]
      interval: 30s
      timeout: 3s
      retries: 5

  # PostgreSQL for analytics (separate instance)
  postgres_analytics:
    image: postgres:15-alpine
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: contest_radar_analytics
      POSTGRES_USER: analytics_user
      POSTGRES_PASSWORD: analytics_password
    volumes:
      - postgres_analytics_data:/var/lib/postgresql/data
    networks:
      - contest_radar_dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analytics_user -d contest_radar_analytics"]
      interval: 30s
      timeout: 3s
      retries: 5

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    networks:
      - contest_radar_dev

  # Database management (optional)
  adminer:
    image: adminer:latest
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - contest_radar_dev

networks:
  contest_radar_dev:
    driver: bridge

volumes:
  postgres_data:
  postgres_analytics_data:
  redis_data:
